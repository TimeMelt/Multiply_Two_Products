/ Jean-Paul Stevens (TimeMelt)
/ Z = (A * B) * (C * D)

ORG  100        / Set Assembler Location Counter 

Input  
Store A         / Store Input as A  
Output A 
Load A  
Store X         / Store A in first parameter for subroutine  
Input  
Store B         / Store Input as B  
Output B 
Load  B  
Store Y         / Store B in second parameter for subroutine  
JnS Multiply    / Jump to multiplication subroutine  
Load Sum        / Get Load the result  
Store  AB       / AB = A * B  
Input  
Store C         / Store Input as C  
Output C 
Load C  
Store X         / Store C in first parameter  
Input  
Store D         /Store Input as D  
Output D 
Load D  
Store Y         / Store D in second parameter  
JnS Multiply    / Jump to multiplication subroutine  
Load Sum        / Get result  
Store CD        / CD = C * D  
Load CD         / Load product of CD  
Store X         / Store as first parameter for subroutine  
Load AB         / Load product of AB  
Store Y         / Store as second parameter for subroutine  
JnS Multiply    / Jump to multiplication subroutine  
Load Sum        / Load product of AB*CD  
Store Z         / Final Result Stored  
EndLoop, Load Z / Get full result  
Output Z	    / Output Final Result  
Halt            / Terminate program

/ VARIABLES
A, Dec 0        / Declare variable A
B, Dec 0        / Declare variable B
C, Dec 0        / Declare variable C
D, Dec 0        / Declare variable D
X, Dec 0        / First parameter for subroutine  
Y, Dec 0        / Second parameter for subroutine  
Ctr, Dec 0      / Looping Counter  
One, Dec 1      / Constant for decrementation  
AB, Dec 0       / Product of AB  
CD, Dec 0       / Product of CD  
Z, Dec 0        / Final Result  
Sum, Dec 0      / Subroutine Product

/ MULTIPLICATION SUBROUTINE
Multiply, Hex 0         / Store return address  
Load Y                  / Load second parameter  
Store Ctr               / Store as counter  
Clear                   / Clear sum  
Store Sum               / Store as Sum
Loop, Load Sum          / Load the sum  
Add X                   / Add first parameter  
Store  Sum              / Store result in Sum  
Load  Ctr               / Load Ctr
Subt One                / Decrement counter  
Store Ctr               / Store counter  
SkipCond  400           / Skip if counter is zero.  
Jump Loop               / Continue subroutine  
JumpI Multiply          / Done with subroutine, return  
END  